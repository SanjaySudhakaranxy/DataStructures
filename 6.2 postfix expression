#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<stdbool.h>
#define MAX_SIZE 100
struct Stack
{
    int top;
    int data[MAX_SIZE];
};

void initialize(struct Stack *stack)
{
    stack->top = -1;
}

bool isEmpty(struct Stack *stack)
{
    return stack->top == -1;
}

bool isFull(struct Stack *stack)
{
    return stack->top == MAX_SIZE - 1;
}


void push(struct Stack *stack, int value)
 {
    if (!isFull(stack))
    {
        stack->data[++stack->top] = value;
    } else
    {
        printf("Stack overflow!\n");
    }
}


int pop(struct Stack *stack)
{
    if (!isEmpty(stack))
    {
        return stack->data[stack->top--];
    }
    else
    {
        printf("Stack underflow!\n");
        return -1;
    }
}

int evaluate(const char *expression)
{
    struct Stack stack;
    initialize(&stack);
    int i = 0;
    while (expression[i] != '\0')
        {
        if (isdigit(expression[i]))
        {
            int num = 0;
            while (isdigit(expression[i]))
            {
                num = num * 10 + (expression[i] - '0');
                i++;
            }
            push(&stack, num);
        }
        else
            if (expression[i] == ' ')
            {
            i++;
            }
            else
            {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            switch (expression[i])
            {
                case '+':
                    push(&stack, operand1 + operand2);
                    break;
                case '-':
                    push(&stack, operand1 - operand2);
                    break;
                case '*':
                    push(&stack, operand1 * operand2);
                    break;
                case '/':
                    if (operand2 == 0)
                    {
                        printf("Division by zero error\n");
                        exit(EXIT_FAILURE);
                    }
                    push(&stack, operand1 / operand2);
                    break;
                default:
                    printf("Invalid operator\n");
                    exit(EXIT_FAILURE);
            }
            i++;
        }
    }

    return pop(&stack);
}

int main()
{
    char str[]="44 2 / 6 -";
    int result = evaluate(str);

    if(result!=-1)
        printf("RESULT : %d\n",result);


}
